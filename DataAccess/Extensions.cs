using DataAccess.Attributes;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Reflection;

namespace DataAccess
{
    internal static class Extensions
    {
        internal static List<T> To<T>(this DataTable dt) where T : new()
        {
            var props = typeof(T).GetProperties();
            return dt.AsEnumerable().Select(row => row.To<T>(props)).ToList();
        }

        internal static T To<T>(this DataRow dataRow) where T : new()
        {
            var props = typeof(T).GetProperties();
            return dataRow.To<T>(props);
        }

        internal static T To<T>(this DataRow dataRow, IEnumerable<PropertyInfo> props) where T : new()
        {
            var t = new T();
            foreach (var prop in props)
            {
                prop.SetValue(t, dataRow[prop.Name]);
            }
            return t;
        }
    }

    internal class ColumnProperty
    {
        public PropertyInfo Property { get; set; }
        public string ColumnName { get; set; }

        public ColumnProperty(PropertyInfo property, string columnName)
        {
            Property = property;
            ColumnName = columnName;
        }

        public static IEnumerable<ColumnProperty> GetColumnProps<T>(bool includeAutoGenerated = true)
        {
            return typeof(T).GetProperties()
                .Select(prop => new ColumnProperty(prop, prop.GetCustomAttribute<ColumnAttribute>()?.Name ?? ""))
                .Where(columnProp => columnProp.ColumnName != "" && (includeAutoGenerated || columnProp.Property.GetCustomAttribute<AutoGeneratedAttribute>() is null));
        }

        public static void CheckColumns<T>(DataTable dt, IEnumerable<ColumnProperty> columnProps)
        {
            var missingColumns = columnProps.Where(columnProp => !dt.Columns.Contains(columnProp.ColumnName)).ToList();

            if (missingColumns.Any())
                throw new ArgumentException($"Data could not be converted to type: {typeof(T)}. Missing columns: {string.Join(", ", missingColumns)}");
        }
    }
}
