// <auto-generated />
using System;
using GameInfrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameInfrastructure.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameCore.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "A measure of one's raw physical force.",
                            Name = "Strength"
                        },
                        new
                        {
                            Id = 1,
                            Description = "A measure of one's raw physical force.",
                            Name = "Endurance"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A measure of one's raw physical force.",
                            Name = "Intellect"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A measure of one's raw physical force.",
                            Name = "Agility"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A measure of one's raw physical force.",
                            Name = "Dexterity"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A measure of one's raw physical force.",
                            Name = "Luck"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A measure of one's raw physical force.",
                            Name = "Max Health"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A measure of one's raw physical force.",
                            Name = "Defense"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A measure of one's raw physical force.",
                            Name = "Cooldown Recovery"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A measure of one's raw physical force.",
                            Name = "Drop Bonus"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A measure of one's raw physical force.",
                            Name = "Critical Chance"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A measure of one's raw physical force.",
                            Name = "Critical Damage"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A measure of one's raw physical force.",
                            Name = "Dodge Chance"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A measure of one's raw physical force.",
                            Name = "Block Chance"
                        },
                        new
                        {
                            Id = 14,
                            Description = "A measure of one's raw physical force.",
                            Name = "Block Reduction"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.AttributeDistribution", b =>
                {
                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPerLevel")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BaseAmount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("EnemyId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeDistributions");
                });

            modelBuilder.Entity("GameCore.Entities.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("GameCore.Entities.EnemyDrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DropRate")
                        .HasPrecision(9, 8)
                        .HasColumnType("decimal(9,8)");

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.HasIndex("ItemId");

                    b.ToTable("EnemyDrops");
                });

            modelBuilder.Entity("GameCore.Entities.EnemySkill", b =>
                {
                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("EnemyId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("EnemySkills");
                });

            modelBuilder.Entity("GameCore.Entities.EquipmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("EquipmentSlots");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            ItemCategoryId = 1,
                            Name = "Helm Slot"
                        },
                        new
                        {
                            Id = 1,
                            ItemCategoryId = 2,
                            Name = "Chest Slot"
                        },
                        new
                        {
                            Id = 2,
                            ItemCategoryId = 3,
                            Name = "Leg Slot"
                        },
                        new
                        {
                            Id = 3,
                            ItemCategoryId = 4,
                            Name = "Boot Slot"
                        },
                        new
                        {
                            Id = 4,
                            ItemCategoryId = 5,
                            Name = "Weapon Slot"
                        },
                        new
                        {
                            Id = 5,
                            ItemCategoryId = 6,
                            Name = "Accessory Slot"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Equipped")
                        .HasColumnType("bit");

                    b.Property<int>("InventorySlotNumber")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("GameCore.Entities.InventoryItemMod", b =>
                {
                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemModId")
                        .HasColumnType("int");

                    b.Property<int>("ItemSlotId")
                        .HasColumnType("int");

                    b.HasKey("InventoryItemId", "ItemModId");

                    b.HasIndex("ItemModId");

                    b.HasIndex("ItemSlotId");

                    b.ToTable("InventoryItemMods");
                });

            modelBuilder.Entity("GameCore.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GameCore.Entities.ItemAttribute", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ItemId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("GameCore.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Helm"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Leg"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Boot"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Weapon"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Accessory"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.ItemMod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Removable")
                        .HasColumnType("bit");

                    b.Property<int>("SlotTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SlotTypeId");

                    b.ToTable("ItemMods");
                });

            modelBuilder.Entity("GameCore.Entities.ItemModAttribute", b =>
                {
                    b.Property<int>("ItemModId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ItemModId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ItemModAttributes");
                });

            modelBuilder.Entity("GameCore.Entities.ItemSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GuaranteedItemModId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Probability")
                        .HasPrecision(9, 8)
                        .HasColumnType("decimal(9,8)");

                    b.Property<int>("SlotTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuaranteedItemModId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SlotTypeId");

                    b.ToTable("ItemSlots");
                });

            modelBuilder.Entity("GameCore.Entities.LogPreference", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("LogSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("PlayerId", "LogSettingId");

                    b.HasIndex("LogSettingId");

                    b.ToTable("LogPreferences");
                });

            modelBuilder.Entity("GameCore.Entities.LogSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultValue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("LogSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultValue = false,
                            Name = "Damage"
                        },
                        new
                        {
                            Id = 2,
                            DefaultValue = false,
                            Name = "Debug"
                        },
                        new
                        {
                            Id = 3,
                            DefaultValue = true,
                            Name = "Exp"
                        },
                        new
                        {
                            Id = 4,
                            DefaultValue = true,
                            Name = "Level Up"
                        },
                        new
                        {
                            Id = 5,
                            DefaultValue = true,
                            Name = "Inventory"
                        },
                        new
                        {
                            Id = 6,
                            DefaultValue = true,
                            Name = "Enemy Defeated"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(88)
                        .HasColumnType("nvarchar(88)");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatPointsGained")
                        .HasColumnType("int");

                    b.Property<int>("StatPointsUsed")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameCore.Entities.PlayerAttribute", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("PlayerId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("PlayerAttributes");
                });

            modelBuilder.Entity("GameCore.Entities.PlayerSkill", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("PlayerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("GameCore.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<decimal>("BaseDamage")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CooldownMS")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("GameCore.Entities.SkillDamageMultiplier", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Multiplier")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("SkillId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("SkillDamageMultipliers");
                });

            modelBuilder.Entity("GameCore.Entities.SlotType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SlotTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Component"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prefix"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Suffix"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("GameCore.Entities.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TagCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acessory"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Armor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Magical"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Material"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Modification"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Usage"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Weapon"
                        });
                });

            modelBuilder.Entity("GameCore.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 0L);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelMax")
                        .HasColumnType("int");

                    b.Property<int>("LevelMin")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneDrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DropRate")
                        .HasPrecision(9, 8)
                        .HasColumnType("decimal(9,8)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneDrops");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneEnemies", t =>
                        {
                            t.HasTrigger("trig_ZoneEnemies_ProbabilityRecalc");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemyAlias", b =>
                {
                    b.Property<int>("ZoneEnemyId")
                        .HasColumnType("int");

                    b.Property<int>("AliasZoneEnemyId")
                        .HasColumnType("int");

                    b.HasKey("ZoneEnemyId");

                    b.ToTable("ZoneEnemyAliases");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemyProbability", b =>
                {
                    b.Property<int>("ZoneEnemyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Probability")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("ZoneOrder")
                        .HasColumnType("int");

                    b.HasKey("ZoneEnemyId");

                    b.ToTable("ZoneEnemyProbabilities");
                });

            modelBuilder.Entity("ItemModTag", b =>
                {
                    b.Property<int>("ItemModsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ItemModsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ItemModTags", (string)null);
                });

            modelBuilder.Entity("ItemTag", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ItemsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ItemTags", (string)null);
                });

            modelBuilder.Entity("GameCore.Entities.AttributeDistribution", b =>
                {
                    b.HasOne("GameCore.Entities.Attribute", "Attribute")
                        .WithMany("AttributeDistributions")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Enemy", "Enemy")
                        .WithMany("AttributeDistributions")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("GameCore.Entities.EnemyDrop", b =>
                {
                    b.HasOne("GameCore.Entities.Enemy", "Enemy")
                        .WithMany("EnemyDrops")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Item", "Item")
                        .WithMany("EnemyDrops")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameCore.Entities.EnemySkill", b =>
                {
                    b.HasOne("GameCore.Entities.Enemy", "Enemy")
                        .WithMany("EnemySkills")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Skill", "Skill")
                        .WithMany("EnemySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("GameCore.Entities.EquipmentSlot", b =>
                {
                    b.HasOne("GameCore.Entities.ItemCategory", "ItemCategory")
                        .WithMany("EquipmentSlots")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("GameCore.Entities.InventoryItem", b =>
                {
                    b.HasOne("GameCore.Entities.Item", "Item")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Player", "Player")
                        .WithMany("InventoryItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameCore.Entities.InventoryItemMod", b =>
                {
                    b.HasOne("GameCore.Entities.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemMods")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.ItemMod", "ItemMod")
                        .WithMany("InventoryItemMods")
                        .HasForeignKey("ItemModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.ItemSlot", "ItemSlot")
                        .WithMany("InventoryItemMods")
                        .HasForeignKey("ItemSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InventoryItem");

                    b.Navigation("ItemMod");

                    b.Navigation("ItemSlot");
                });

            modelBuilder.Entity("GameCore.Entities.Item", b =>
                {
                    b.HasOne("GameCore.Entities.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("GameCore.Entities.ItemAttribute", b =>
                {
                    b.HasOne("GameCore.Entities.Attribute", "Attribute")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Item", "Item")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameCore.Entities.ItemMod", b =>
                {
                    b.HasOne("GameCore.Entities.SlotType", "SlotType")
                        .WithMany("ItemMods")
                        .HasForeignKey("SlotTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotType");
                });

            modelBuilder.Entity("GameCore.Entities.ItemModAttribute", b =>
                {
                    b.HasOne("GameCore.Entities.Attribute", "Attribute")
                        .WithMany("ItemModAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.ItemMod", "ItemMod")
                        .WithMany("ItemModAttributes")
                        .HasForeignKey("ItemModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ItemMod");
                });

            modelBuilder.Entity("GameCore.Entities.ItemSlot", b =>
                {
                    b.HasOne("GameCore.Entities.ItemMod", "GuaranteedItemMod")
                        .WithMany("GuaranteedSlots")
                        .HasForeignKey("GuaranteedItemModId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GameCore.Entities.Item", "Item")
                        .WithMany("ItemSlots")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.SlotType", "SlotType")
                        .WithMany("ItemSlots")
                        .HasForeignKey("SlotTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuaranteedItemMod");

                    b.Navigation("Item");

                    b.Navigation("SlotType");
                });

            modelBuilder.Entity("GameCore.Entities.LogPreference", b =>
                {
                    b.HasOne("GameCore.Entities.LogSetting", "LogSetting")
                        .WithMany("LogPreferences")
                        .HasForeignKey("LogSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Player", "Player")
                        .WithMany("LogPreferences")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogSetting");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameCore.Entities.PlayerAttribute", b =>
                {
                    b.HasOne("GameCore.Entities.Attribute", "Attribute")
                        .WithMany("PlayerAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Player", "Player")
                        .WithMany("PlayerAttributes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameCore.Entities.PlayerSkill", b =>
                {
                    b.HasOne("GameCore.Entities.Player", "Player")
                        .WithMany("PlayerSkills")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Skill", "Skill")
                        .WithMany("PlayerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("GameCore.Entities.SkillDamageMultiplier", b =>
                {
                    b.HasOne("GameCore.Entities.Attribute", "Attribute")
                        .WithMany("SkillDamageMultipliers")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Skill", "Skill")
                        .WithMany("SkillDamageMultipliers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("GameCore.Entities.Tag", b =>
                {
                    b.HasOne("GameCore.Entities.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneDrop", b =>
                {
                    b.HasOne("GameCore.Entities.Item", "Item")
                        .WithMany("ZoneDrops")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Zone", "Zone")
                        .WithMany("ZoneDrops")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemy", b =>
                {
                    b.HasOne("GameCore.Entities.Enemy", "Enemy")
                        .WithMany("ZoneEnemies")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Zone", "Zone")
                        .WithMany("ZoneEnemies")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemyAlias", b =>
                {
                    b.HasOne("GameCore.Entities.ZoneEnemy", "ZoneEnemy")
                        .WithOne("ZoneEnemyAlias")
                        .HasForeignKey("GameCore.Entities.ZoneEnemyAlias", "ZoneEnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZoneEnemy");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemyProbability", b =>
                {
                    b.HasOne("GameCore.Entities.ZoneEnemy", "ZoneEnemy")
                        .WithOne("ZoneEnemyProbability")
                        .HasForeignKey("GameCore.Entities.ZoneEnemyProbability", "ZoneEnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZoneEnemy");
                });

            modelBuilder.Entity("ItemModTag", b =>
                {
                    b.HasOne("GameCore.Entities.ItemMod", null)
                        .WithMany()
                        .HasForeignKey("ItemModsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemTag", b =>
                {
                    b.HasOne("GameCore.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameCore.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameCore.Entities.Attribute", b =>
                {
                    b.Navigation("AttributeDistributions");

                    b.Navigation("ItemAttributes");

                    b.Navigation("ItemModAttributes");

                    b.Navigation("PlayerAttributes");

                    b.Navigation("SkillDamageMultipliers");
                });

            modelBuilder.Entity("GameCore.Entities.Enemy", b =>
                {
                    b.Navigation("AttributeDistributions");

                    b.Navigation("EnemyDrops");

                    b.Navigation("EnemySkills");

                    b.Navigation("ZoneEnemies");
                });

            modelBuilder.Entity("GameCore.Entities.InventoryItem", b =>
                {
                    b.Navigation("InventoryItemMods");
                });

            modelBuilder.Entity("GameCore.Entities.Item", b =>
                {
                    b.Navigation("EnemyDrops");

                    b.Navigation("InventoryItems");

                    b.Navigation("ItemAttributes");

                    b.Navigation("ItemSlots");

                    b.Navigation("ZoneDrops");
                });

            modelBuilder.Entity("GameCore.Entities.ItemCategory", b =>
                {
                    b.Navigation("EquipmentSlots");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameCore.Entities.ItemMod", b =>
                {
                    b.Navigation("GuaranteedSlots");

                    b.Navigation("InventoryItemMods");

                    b.Navigation("ItemModAttributes");
                });

            modelBuilder.Entity("GameCore.Entities.ItemSlot", b =>
                {
                    b.Navigation("InventoryItemMods");
                });

            modelBuilder.Entity("GameCore.Entities.LogSetting", b =>
                {
                    b.Navigation("LogPreferences");
                });

            modelBuilder.Entity("GameCore.Entities.Player", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("LogPreferences");

                    b.Navigation("PlayerAttributes");

                    b.Navigation("PlayerSkills");
                });

            modelBuilder.Entity("GameCore.Entities.Skill", b =>
                {
                    b.Navigation("EnemySkills");

                    b.Navigation("PlayerSkills");

                    b.Navigation("SkillDamageMultipliers");
                });

            modelBuilder.Entity("GameCore.Entities.SlotType", b =>
                {
                    b.Navigation("ItemMods");

                    b.Navigation("ItemSlots");
                });

            modelBuilder.Entity("GameCore.Entities.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("GameCore.Entities.Zone", b =>
                {
                    b.Navigation("ZoneDrops");

                    b.Navigation("ZoneEnemies");
                });

            modelBuilder.Entity("GameCore.Entities.ZoneEnemy", b =>
                {
                    b.Navigation("ZoneEnemyAlias")
                        .IsRequired();

                    b.Navigation("ZoneEnemyProbability")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
